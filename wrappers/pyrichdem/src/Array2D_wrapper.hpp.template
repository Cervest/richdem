  m.def("rdFillDepressions", &improved_priority_flood<@T@>,   "@@depressions/Zhou2016pf.hpp:Zhou2016@@");
  m.def("rdPFepsilon",       &priority_flood_epsilon<@T@>,    "Fill all depressions with epsilon.");

  m.def("TA_SPI",                &TA_SPI<@T@, float, double>,        "TODO");         
  m.def("TA_CTI",                &TA_CTI<@T@, float, double>,        "TODO");         
  m.def("TA_slope_riserun",      &TA_slope_riserun<@T@>,             "TODO");                   
  m.def("TA_slope_percentage",   &TA_slope_percentage<@T@>,          "TODO");                      
  m.def("TA_slope_degrees",      &TA_slope_degrees<@T@>,             "TODO");                   
  m.def("TA_slope_radians",      &TA_slope_radians<@T@>,             "TODO");                   
  m.def("TA_aspect",             &TA_aspect<@T@>,                    "TODO");            
  m.def("TA_curvature",          &TA_curvature<@T@>,                 "TODO");               
  m.def("TA_planform_curvature", &TA_planform_curvature<@T@>,        "TODO");                        
  m.def("TA_profile_curvature",  &TA_profile_curvature<@T@>,         "TODO");                       

  m.def("FA_Tarboton",          &FA_Tarboton<@T@,double>,          "TODO");
  m.def("FA_Holmgren",          &FA_Holmgren<@T@,double>,          "TODO");
  m.def("FA_Quinn",             &FA_Quinn<@T@,double>,             "TODO");
  m.def("FA_Freeman",           &FA_Freeman<@T@,double>,           "TODO");
  m.def("FA_FairfieldLeymarie", &FA_FairfieldLeymarie<@T@,double>, "TODO");
  m.def("FA_Rho8",              &FA_Rho8<@T@,double>,              "TODO");
  m.def("FA_D8",                &FA_D8<@T@,double>,                "TODO");
  m.def("FA_OCallaghan",        &FA_OCallaghan<@T@,double>,        "TODO");

  py::class_<Array2D<@T@>>(m, "Array2D_@T@", py::buffer_protocol(), py::dynamic_attr())
      .def(py::init<>())
      .def(py::init<Array2D<@T@>::xy_t,Array2D<@T@>::xy_t,@T@>())
      .def(py::init<const Array2D<@U@>&, @T@>())
      .def(py::init<@T@*, const int, const int>())
      .def("size",      &Array2D<@T@>::size)
      .def("width",     &Array2D<@T@>::width)
      .def("height",    &Array2D<@T@>::height)
      .def("empty",     &Array2D<@T@>::empty)
      .def("noData",    &Array2D<@T@>::noData)
      .def("min",       &Array2D<@T@>::min)
      .def("max",       &Array2D<@T@>::max)
      .def("setNoData", &Array2D<@T@>::setNoData)
      .def_readwrite("geotransform", &Array2D<@T@>::geotransform)
      .def_readwrite("projection",   &Array2D<@T@>::projection)
      .def_readwrite("metadata",     &Array2D<@T@>::metadata)
      .def("copy", [](const Array2D<@T@> a){
        return a;
      })
      .def("fromArray", [](Array2D<@T@> &a, py::handle src){
        // if(!py::array_t<@T@>::check_(src)) //TODO: What's this about?
          // return false;

        auto buf = py::array_t<@T@, py::array::c_style | py::array::forcecast>::ensure(src);
        if (!buf)
          throw std::runtime_error("Unable to convert array to RichDEM object!");

        auto dims = buf.ndim();
        if (dims != 2 )
          throw std::runtime_error("Array must have two dimensions!");

        a.clear();
        a.resize(buf.shape()[1], buf.shape()[0]);
        @T@* dat = (@T@*)buf.data();
        for(Array2D<@T@>::i_t i=0;i<a.size();i++)
          a(i) = dat[i];
      })
      .def_buffer([](Array2D<@T@> &arr) -> py::buffer_info {
        return py::buffer_info(
          arr.getData(),
          sizeof(@T@),
          py::format_descriptor<@T@>::format(),
          2,                                           //Dimensions
          {arr.height(), arr.width()},                 //Shape
          {sizeof(@T@) * arr.width(), sizeof(@T@)} //Stride (in bytes)
        );
      })
      .def("__repr__",
        [](const Array2D<@T@> &a) {
            return "<RichDEM array: type=@T@, width="+std::to_string(a.width())+", height="+std::to_string(a.height())+", owned="+std::to_string(a.owned())+">";
        }
      )
      .def("__call__",
        [](Array2D<@T@> &a, const int x, const int y) -> @T@& {
          return a(x,y);
        }
      )
      .def("__call__",
        [](Array2D<@T@> &a, const int i) -> @T@& {
          return a(i);
        }
      );      