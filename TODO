RichDEM: Speaking of, I think one of the only other improvements you could make would be to load the output grids created automatically as a default.  Otherwise, you could add a check box asking people if they did or didn’t want them to load after processing.

CALL_GRAPH = YES in doxygen output

fma, fmaf, fmal   also     fenv

Speaking of, I think one of the only other improvements you could make would be to load the output grids created automatically as a default.  Otherwise, you could add a check box asking people if they did or didn’t want them to load after processing.  Something like “Add files after processing?” or what not.

print_and_highlight is duplicitous with print_dem

Add Dinf support for the pit-carving thing

Add checks for "edge contamination" to the D8 and Dinf area methods

Add checks for digital dams to d8 methods like they are in dinf methods in the flow_area functions

sizeof returns a result of type size_t, which varies from system to system. Using the iostream operators for output would likely eliminate warnings thrown by this. Otherwise, find some way to make things work with printf/fprintf

The 'collapse' directive on the parallel for loop thing may be useful
Look into uBLAS "release mode" (http://www.boost.org/doc/libs/1_49_0/libs/numeric/ublas/doc/index.htm)
"http://www.boost.org/doc/libs/1_49_0/libs/numeric/ublas/doc/index.htm"
mmap or boost::mapped_file

Useful for printing output
out.width(width);
out.precision(precision);
out.setf(ios::fixed,ios::floatfield);

ArcGIS has a more complicated method of determining D8 flow directions than I do
http://webhelp.esri.com/arcgiSDEsktop/9.3/index.cfm?TopicName=Determining_flow_direction
http://webhelp.esri.com/arcgisdesktop/9.2/index.cfm?TopicName=flow_direction

Beyond these kinds of relationships and the ensuing impacts, the
decisions made about unwanted depressions (i.e. spurious pits or
sinks) will have a large impact on the subsequent analysis and
interpretation of the results of geomorphometric analysis. Two
approaches have found frequent use — one relies on progressively
filling the sinks by increasing their elevation values until the elevation
of their lowest outflow point is reached (e.g. Jenson and Domingue,
1988; Martz and de Jong, 1988; Soille and Gratin, 1994; Planchon and
Darboux, 2001; Wang and Liu, 2006), whereas the second method
creates a descending path from the bottom of the sink by carving the
terrain along this path until the nearest point is reached which has an
elevation lower than the bottom of the sink (e.g. Morris and
Heerdegen, 1988; Rieger, 1992; Martz and Garbrecht, 1999; Soille
et al., 2003; Soille, 2004). However, Reuter et al. (2009) recently used
both of these approaches along with one that combined sink filling
and carving such that the sum of the differences in elevation between
the input DEMs and the output DEMs that did not have sinks were
minimized. This combined approach produced superior results for the
Baranja Hill study catchment in Croatia [see Grimaldi et al. (2007)
for an alternative physically-based approach]. Lindsay and Creed
(2005a,b, 2006) have also combined elements of the aforementioned
approaches and used them to distinguish artifact and real depressions
in digital elevation data and to propose a minimum impact approach
for removing the artifact depressions in relatively flat landscapes like
those occurring on the Canadian Shield.

The above is from "Digital terrain modeling" by John P. Wilson. Published in 2011.





@inproceedings{heckbert1990seed,
  title={A seed fill algorithm},
  author={Heckbert, P.S.},
  booktitle={Graphics gems},
  pages={275--277},
  year={1990},
  organization={Academic Press Professional, Inc.}
}
http://www.cs.cmu.edu/~ph/
Reference: see Paul Heckbert's stack-based seed fill algorithm
 *          in "Graphic Gems", ed. Andrew Glassner, Academic
 *          Press, 1990.  The algorithm description is given
 *          on pp. 275-277; working C code is on pp. 721-722.)


http://www.leptonica.com/filling.html


@inproceedings{fishkin1985analysis,
  title={Analysis and algorithm for filling propagation.},
  author={Fishkin, K.P. and Barsky, B.},
  booktitle={Graphics Interface'85},
  pages={203--212},
  year={1985}
}








To get the correct results, don't set precision greater than available for this numeric type:

#include <iostream>
#include <limits>
int main()
{
        double a = 0.3;
        std::cout.precision(std::numeric_limits<double>::digits10);
        std::cout << a << std::endl;
        double b = 0;
        for (char i = 1; i <= 50; i++) {
                  b = b + a;
        };
        std::cout.precision(std::numeric_limits<double>::digits10);
        std::cout << b << std::endl;
}
Although if that loop runs for 5000 iterations instead of 50, the accumulated error will show up even with this approach -- it's just how floating-point numbers work.



//TODO: Useful only for debugging
int getc(const char_2d &m, int x, int y) { return m(x,y); }
int getf(const float_2d &m, int x, int y) {	return m(x,y); }





Consider Kahan in flow accumulation:
I. Babuˇka. Numerical stability in mathematical analysis. Information Processing, 68:11–23, 1969.

W. Kahan. Further remarks on reducing trunctation errors. Comm. ACM, 8:40, 1965.

A. Neumaier. Rundungsfehleranalyse einiger Verfahren zur Summation endlicher Summen. Z. angew. Math. Mechanik, 54:39–51, 1974.

T. Ogita, S. M. Rump, and S. Oishi. Accurate sum and dot products. SIAM, 2005. to appear.



Distribution methods:
GPL=viral license

QGis modules!

freshmeat.net

kickstarter

Consider RiverTools' mass-flux algorithm, which improves on D-infinite
